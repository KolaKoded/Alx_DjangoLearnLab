"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--qnwex$(p1&uve%ui=kq9*2y=j$b7pq60754g(sfkf_i4t%x98'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False # Change this to False when deploying to production

# Enable browser security settings
SECURE_BROWSER_XSS_FILTER = True
# This setting adds an HTTP header to enable the XSS filter built into most browsers, reducing the risk of XSS attacks.

SECURE_CONTENT_TYPE_NOSNIFF = True
# This setting prevents browsers from interpreting files as something else than what is specified in the Content-Type header.

X_FRAME_OPTIONS = 'DENY'
# This setting prevents the site from being framed, which helps to mitigate clickjacking attacks.

# Secure cookies with HTTPS
CSRF_COOKIE_SECURE = True
# Ensures that the CSRF cookie is only sent over HTTPS, preventing it from being sent over insecure channels.

SESSION_COOKIE_SECURE = True
# Ensures that session cookies are only sent over HTTPS, reducing the risk of session hijacking over insecure channels.


SECURE_SSL_REDIRECT = True # Redirects all HTTP requests to HTTPS
SECURE_HSTS_SECONDS = 31536000 # 1 year to instruct browsers to always use HTTPS
SECURE_HSTS_INCLUDE_SUBDOMAINS = True # Includes subdomains in the HSTS policy
SECURE_HSTS_PRELOAD = True # Adds the site to the HSTS preload list

ALLOWED_HOSTS = ['*'] # Change this to the domain name of your site when deploying to production


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'csp',
    'bookshelf',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',
]

CSP_IMG_SRC = ("'self'")
CSP_STYLE_SRC = ("'self'")
CSP_SCRIPT_SRC = ("'self'")
CSP_DEFAULT_SRC = ("'self'")

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#--------------------------------------------------- SECUIRTY PRACTICES AND HOW THEY ARE IMPLEMENTED IN THE CODE ---------------------------------------------------
# Debug Mode:
# How: Set DEBUG = False in the settings.py file for production.
# Why: Disabling debug mode prevents the application from showing detailed error messages that could reveal sensitive information about your application’s internals.

# Browser Security Settings:
# How: Configure settings like SECURE_BROWSER_XSS_FILTER, SECURE_CONTENT_TYPE_NOSNIFF, and X_FRAME_OPTIONS in settings.py.
# Why:
# SECURE_BROWSER_XSS_FILTER: Activates the browser’s built-in XSS protection to block reflected XSS attacks.
# SECURE_CONTENT_TYPE_NOSNIFF: Prevents browsers from interpreting files differently from their declared content type to mitigate MIME-type sniffing attacks.
# X_FRAME_OPTIONS: Prevents clickjacking by disallowing your site from being embedded in iframes on other sites.

# Secure Cookies:
# How: Set CSRF_COOKIE_SECURE and SESSION_COOKIE_SECURE to True in settings.py.
# Why: Ensures that cookies are only transmitted over HTTPS, reducing the risk of interception by attackers.

# Content Security Policy (CSP):
# How: Implement CSP using the django-csp middleware or set CSP headers manually.
# Why: Restricts the sources from which content like scripts, styles, and images can be loaded, mitigating XSS attacks by preventing unauthorized content from being executed.

# CSRF Protection:
# How: Include CSRF tokens in forms using Django’s CSRF middleware.
# Why: Protects against Cross-Site Request Forgery (CSRF) attacks by ensuring that requests made to your application are intentional and from authenticated users.

# SQL Injection Prevention:
# How: Use Django’s ORM for database queries and avoid raw SQL where possible.
# Why: The ORM automatically parameterizes queries, preventing SQL injection attacks where malicious SQL code could be executed.

# Permissions and Access Control:
# How: Use @permission_required decorators and other Django permission mechanisms to control access.
# Why: Ensures that only authorized users can access or modify certain parts of the application, enhancing data security and user privacy.

# Manual CSP Header Setting:
# How: Directly set CSP headers in response objects or configure via middleware.
# Why: Provides additional flexibility in enforcing CSP rules, ensuring that all potential sources of content are controlled.

# CSRF and Session Cookie Security:
# How: Set CSRF_COOKIE_SECURE and SESSION_COOKIE_SECURE to True.
# Why: Ensures that cookies are transmitted securely over HTTPS, protecting them from being intercepted by attackers.